/**
\mainpage Integration

This package contains the necessary classes to run Salida process.

Bellow, you can find the steps below to integrate Salida into your project.

<h2>1. Dependencies</h2>

Firstly, you must add the Salida.framework file into your project. Fristly, go to the "project" file of your iOS project
and click on the target where you want to integrate this SDK. On the right, in the "General" tab, scroll down and look
for a section called "Embedded Binaries". Click on the plus (+) button and add the framework.

<h2>2. Creating an instance of Salida</h2>

To initialize the Salida framework, you must create an instance of its main class. Calling
Salida::createInstance. This operation must be done after having initialized the CommonSDK. The code below shows an
example of both calls in a generic AppDelegate class:

@code
#import <CommonSDK/CommonSDK.h>
#import <Salida/Salida.h>

@implementation AppDelegate

...

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    [Neuromobile initWithSecret:@"<your_secret_here>"];
    // Other CommonSDK operations...

    [Salida createInstance];
    return YES;
}

...

@end
@endcode

To check how to initialize the CommomSDK framework properly, please refer to its documentation.

<h2>3. Getting location notifications</h2>

<h4>3.1 Location</h4>


To start the localization system it is necessary to call the method Salida::applicationWillEnterForeground once we have checked that the app can receive the localization services, this code must be added in the method didFinishLaunchingWithOptions.

@code
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    ...

    if ([launchOptions objectForKey:UIApplicationLaunchOptionsLocationKey]) {
        NMSLogger_Verbose(@"App started by received location");
        [Salida applicationWillEnterForeground];
    }

    ...
    return YES;
}

@endcode

You must call Salida::applicationDidEnterBackground in the applicationDidEnterBackground method of the AppDelegate file moreover, you must call Salida::applicationWillEnterForeground in the applicationWillEnterForeground method of the AppDelegate file.

@code
- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    [Salida applicationDidEnterBackground];
}


- (void)applicationWillEnterForeground:(UIApplication *)application {
    // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
    [Salida applicationWillEnterForeground];
}

@endcode


<h4>3.2 Notification (Optional)</h4>

To receive notifications when the user enters or leaves a monitored building, you must add the notifications framework of iOS, in the file AppDelegate.h import the framework and add the delegate  UNUserNotificationCenterDelegate.


@code


    // AppDelegate.h
    ...

    #import <UserNotifications/UserNotifications.h>

    @interface AppDelegate : UIResponder <UIApplicationDelegate, UNUserNotificationCenterDelegate>

    ...

@end
@endcode


In the method didFinishLaunchingWithOptions of your AppDelegate.m you have to initialize the UNUserNotificationCenter, add it as a delegate and check if you have permission to send notifications. Once this is done, you have to register the receiveBuildingInNotification and receiveBuildingOutNotification methods that will be responsilbe of getting the necessary data, creating such methods in the AppDelegate.m


@code

@implementation AppDelegate

        ...

    - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {

        ...

         UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];
        center.delegate = self;

        [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert + UNAuthorizationOptionSound) completionHandler:^(BOOL granted, NSError * _Nullable error) {
            // Enable or disable features based on authorization.

        }];

        [[NSNotificationCenter defaultCenter] addObserver:self
                                                 selector:@selector(receiveBuildingInNotification:)
                                                     name:@"BuildingInNotification"
                                                   object:nil];

        [[NSNotificationCenter defaultCenter] addObserver:self
                                                 selector:@selector(receiveBuildingOutNotification:)
                                                     name:@"BuildingOutNotification"
                                                   object:nil];

        return YES;
    }


- (void) receiveBuildingInNotification:(NSNotification *) notification {


    ...

    NSDictionary *data = notification.object;
    //building_name : Get name of building
    NSString * building_name = data[@"building_name"];
    //type : Get if building is competition or not, the posible values o are: "main" and "competition".
    NSString *type= data[@"type"];

    ...

}

- (void) receiveBuildingOutNotification:(NSNotification *) notification {

    ...

    NSDictionary *data = notification.object;
    //building_name : Get name of building
    NSString * building_name = data[@"building_name"];
    //type : Get if building is competition or not, the posible values o are: "main" and "competition".
    NSString *type= data[@"type"];

    ...

}
@end
@endcode


<h2>4. Background Fetch</h2>


For the proper functioning of the SDK it is necessary to use the Background Fetch. Add the following code in the didFinishLaunchingWithOptions of the AppDelegate.m and call the method Salida::performBackgroundFetch when the corresponding method is called.

@code
@implementation AppDelegate

...

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {

    ...

    [[UIApplication sharedApplication] setMinimumBackgroundFetchInterval:15.0];

    ...

    return YES;
}

-(void)application:(UIApplication *)application performFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler{

    ...

    [Salida performBackgroundFetch];
    completionHandler(UIBackgroundFetchResultNoData);

    ...

}

@end
@endcode


*/
